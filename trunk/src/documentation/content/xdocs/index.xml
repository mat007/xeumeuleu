<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2005 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Overview</title>
  </header>
  <body>
    <section id="what-is">
      <title>What is XeuMeuLeu</title>
      <p>
        XeuMeuLeu is an open-source cross-platform C++ stream oriented library on top of <a href="ext:xerces">Apache Xerces</a>
        for manipulating XML and <a href="ext:xalan">Apache Xalan</a> for applying XSL transformations.<br />
        It aims at hiding complexity by providing an easy means to read, write and transform XML.
      </p>
      <p>
        The following features are available :
      </p>
      <ul>
        <li>source can be a string, a file, a url, any std::istream or an internal buffer</li>
        <li>destination can be a string, a file or an internal buffer</li>
        <li>encoding can be any of the <a href="ext:xerces/encodings">encodings supported by Apache Xerces</a></li>
        <li>output is formated for human readability</li>
        <li>input can be validated against an XML schema definition (XSD)</li>
        <li>transformations can be applied using the extensible stylesheet language (XSL)</li>
      </ul>
    </section>

    <section id="what-is-not">
      <title>What XeuMeuLeu is not</title>
      <p>
        XeuMeuLeu is not an XML parser as it relies on <a href="ext:xerces">Apache Xerces</a> for this.
      </p>
      <p>
        XeuMeuLeu is not an XSLT processor as it relies on <a href="ext:xalan">Apache Xalan</a> for this.
      </p>
      <p>
        XeuMeuLeu does not turn <a href="ext:xerces">Apache Xerces</a> into a pull-parser, XML documents are parsed in memory when a stream is created or flushed to the stream when the document is complete.
      </p>
      <p>
        XeuMeuLeu is not a data-binding framework, it does not automatically (un)serialize objects.
      </p>
    </section>

    <section id="why">
      <title>Why use XeuMeuLeu</title>
      <p>
        Because of the following benefits :
      </p>
      <ul>
        <li>the high-level stream oriented design allows to quickly write easy and simple code</li>
        <li>the underlying use of <a href="ext:xerces">Apache Xerces</a> as well as <a href="ext:xalan">Apache Xalan</a> ensures a wide range of features</li>
        <li>the open-source license guarantees code availability and usability even for commercial applications</li>
        <li>the unit tests coverage greatly helps reducing the risk of bugs within the library</li>
      </ul>
    </section>

    <section id="what-looks">
      <title>What XeuMeuLeu looks like</title>
      <p>
        Given the following XML document :
      </p>
      <source><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<document>
  <element name="my element" />
  <another-element>my content</another-element>
</document>]]></source>
      <p>
        The code to read it would simply be :
      </p>
      <source><![CDATA[#include <xeumeuleu/xml.h>

std::string name, content;
xml::xifstream xis( "my_document.xml" );
xis >> xml::start( "document" )
      >> xml::start( "element" )
        >> xml::attribute( "name", name )
      >> xml::end()
      >> xml::content( "another-element", content );]]></source>
      <p>
        Writing the same file would be symmetrical :
      </p>
      <source><![CDATA[#include <xeumeuleu/xml.h>

xml::xofstream xos( "my_document.xml" );
xos << xml::start( "document" )
      << xml::start( "element" )
        << xml::attribute( "name", "my element" )
      << xml::end()
      << xml::content( "another-element", "my content" )
    << xml::end();]]></source>
      <p>
        Applying a transformation based for instance on the stylesheet :
      </p>
      <source><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    <html>
    <body>
      <h2>Document</h2>
      <ul>
        <li>Element : <xsl:value-of select="document/element/@name"/></li>
        <li>Another element : <xsl:value-of select="document/another-element"/></li>
      </ul>
    </body>
    </html>
  </xsl:template>
</xsl:stylesheet>
]]></source>
      <p>
        Using the code :
      </p>
      <source><![CDATA[#include <xeumeuleu/xsl.h>

xsl::xftransform xft( "stylesheet.xsl", "output.html" );
xft << xml::start( "document" )
      << xml::start( "element" )
        << xml::attribute( "name", "my element" )
      << xml::end()
      << xml::content( "another-element", "my content" )
    << xml::end();]]></source>
      <p>
        Would output the HTML file :
      </p>
      <source><![CDATA[<html>
  <body>
    <h2>Document</h2>
    <ul>
      <li>Element : my element</li>
      <li>Another element : my content</li>
    </ul>
  </body>
</html>]]></source>
      <p>
        Of course those are a few examples only intended to demonstrate the feel of the library.<br />
        The user manuals provide an extensive description of all features.
      </p>
    </section>

  </body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2005 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Manual</title>
  </header>
  <body>
    <section id="general">
      <title>General</title>
      <p>
        The first step explains how to include the library and how errors are reported back to the user.
      </p>
      <section id="include">
        <title>Including the library</title>
        <p>
          In order to use the library only one include statement is necessary :
        </p>
        <source><![CDATA[#include <xeuseuleu/xsl.h>]]></source>
      </section>
      <section id="error">
        <title>Error management</title>
        <p>
          Should an error happen manipulating a stream an exception of type <em>xsl::exception</em> which derives from <em>std::exception</em> will be raised.
        </p>
      </section>
    </section>
    <section id="creation">
     <title>Creating a stylesheet</title>
     <p>
       The following code creates a stylesheet from an XSL document <em>stylesheet.xsl</em> to write a document to a file <em>file.output</em> :
     </p>
     <source><![CDATA[xsl::xftransform xf( "stylesheet.xsl", "file.output" );]]></source>
      <p>
        The following code creates a stylesheet from an XSL document <em>stylesheet.xsl</em> to write an XML document to an <em>std::string</em> :
      </p>
      <source><![CDATA[xsl::xstringtransform xst( "stylesheet.xsl" );]]></source>
      <p>
        After the transformation is finished the resulting XML document can be retrieved :
      </p>
      <source><![CDATA[const std::string xml = xst.str();]]></source>
     <p>
       The following code creates a stylesheet from an XSL document <em>stylesheet.xsl</em> :
     </p>
     <source><![CDATA[xsl::xbuffertransform xbt( "stylesheet.xsl" );]]></source>
     <p>
       The purpose of this type of stylesheet is to chain XML transformations in another stylesheet.
     </p>      
    </section>
    <section id="transformation">
     <title>Transforming the tree</title>
     <p>
       The purpose of XeuSeuLeu stylesheet is to transform an XML document built with XeuMeuLeu. As an example:
     </p>
     <source><![CDATA[xsl::xstringtransform xst( "stylesheet.xsl" );
xst << xml::start( "root" )
        << xml::start( "element" )
        << xml::end()
    << xml::end();]]></source>
    <p>
      Technically the transformation is performed when the document is valid and complete (ie: after the last xml::end).
    </p>
    <p>
      Corollary the following code is valid :
    </p>
    <source><![CDATA[xsl::xstringtransform xst( "stylesheet.xsl" );
xml::xistringstream xis(
  "<root>"
    "<element/>"
  "</root>"
);
xst << xis;
]]></source>
     <section id="buffer">
       <title>Chained transformations</title>
       <p>
         -- TO DO --
       </p>
     </section>
     <section id="parameter">
       <title>Stylesheet parameter</title>
       <p>
         -- TO DO --
       </p>
     </section>
    </section>
  </body>
</document>
